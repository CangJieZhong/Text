<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 扫描注解 -->
	<!-- 配置的redis的客户端jedis -->
	<!-- jedis的连接池的配置信息 -->
       <bean  id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
         <!-- 最大连接数 -->
         <property name="maxTotal" value="${redis.maxTotal}"/>
         <!-- 最大空闲连接数 -->
         <property name="maxIdle" value="${redis.maxIdle}"/>
         <!-- 最小的空闲连接数 -->
         <property name="minIdle" value="${redis.minIdle}"/>
       </bean>
	<!-- 配置连接池的对象 -->
	<!-- <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" />
	</bean> -->
	<!-- 集群JedisCluster的配置 -->
	<!-- <bean id="JedisCluster" class="redis.clients.jedis.JedisCluster">
		<constructor-arg name="nodes">
			<set>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="127.0.0.1"></constructor-arg>
					<constructor-arg name="port" value="6379"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="127.0.0.1"></constructor-arg>
					<constructor-arg name="port" value="6380"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="127.0.0.1"></constructor-arg>
					<constructor-arg name="port" value="6381"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="127.0.0.1"></constructor-arg>
					<constructor-arg name="port" value="6382"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="127.0.0.1"></constructor-arg>
					<constructor-arg name="port" value="6383"></constructor-arg>
				</bean>
				<bean class="redis.clients.jedis.HostAndPort">
					<constructor-arg name="host" value="127.0.0.1"></constructor-arg>
					<constructor-arg name="port" value="6384"></constructor-arg>
				</bean>
			</set>
		</constructor-arg>
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
	</bean> -->
	<!-- spring redis集群配置 -->

	<!-- Redis集群配置 <bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration"> 
		<property name="maxRedirects" value="6"></property> <property name="clusterNodes"> 
		<set> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="127.0.0.1"></constructor-arg> <constructor-arg 
		name="port" value="6379"></constructor-arg> </bean> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="127.0.0.1"></constructor-arg> <constructor-arg 
		name="port" value="6380"></constructor-arg> </bean> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="127.0.0.1"></constructor-arg> <constructor-arg 
		name="port" value="6381"></constructor-arg> </bean> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="127.0.0.1"></constructor-arg> <constructor-arg 
		name="port" value="6382"></constructor-arg> </bean> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="127.0.0.1"></constructor-arg> <constructor-arg 
		name="port" value="6383"></constructor-arg> </bean> <bean class="org.springframework.data.redis.connection.RedisNode"> 
		<constructor-arg name="host" value="127.0.0.1"></constructor-arg> <constructor-arg 
		name="port" value="6384"></constructor-arg> </bean> </set> </property> </bean> 
		<bean id="redis4CacheConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> 
		<constructor-arg name="clusterConfig" ref="redisClusterConfig" /> <property 
		name="poolConfig" ref="redisPoolConfig" /> </bean> 存储序列化 <bean name="stringRedisSerializer" 
		class="org.springframework.data.redis.serializer.StringRedisSerializer" /> 
		集群Resis使用模板 <bean id="clusterRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		<property name="connectionFactory" ref="redis4CacheConnectionFactory" /> 
		<property name="keySerializer" ref="stringRedisSerializer" /> <property name="hashKeySerializer" 
		ref="stringRedisSerializer" /> <property name="valueSerializer" ref="stringRedisSerializer" 
		/> <property name="hashValueSerializer" ref="stringRedisSerializer" /> </bean> -->


	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="password" value="${redis.password}" />
	</bean>

	<!-- Redistemplate: 封装了jedis的方法, 纯面向对象的 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />

		<!-- 序列化方式 建议key/hashKey采用StringRedisSerializer -->
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<!-- 开启REIDS事务支持 -->
		<property name="enableTransactionSupport" value="false" />
	</bean>

	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<constructor-arg ref="jedisConnectionFactory" />
		<!-- 开启REIDS事务支持 -->
		<property name="enableTransactionSupport" value="false" />
	</bean>
</beans>
